using System;

namespace Entities
{
    public class Нагрузка
    {
        public const string CollectionName = "workload";

        public Нагрузка(float лекции, float лабораторные, float практические, float зачеты, float консультации,
            float экзамены, float практикиНир, float курсовоеПроектирование, float вкр, float гэк, float гакДопЗащРец,
            float руководство)
        {
            Лекции = лекции;
            Лабораторные = лабораторные;
            Практические = практические;
            Зачеты = зачеты;
            Консультации = консультации;
            Экзамены = экзамены;
            ПрактикиНир = практикиНир;
            КурсовоеПроектирование = курсовоеПроектирование;
            Вкр = вкр;
            Гэк = гэк;
            ГакДопЗащРец = гакДопЗащРец;
            Руководство = руководство;
        }

        public int Id { get; set; }
        public float Лекции { get; set; }
        public float Лабораторные { get; set; }
        public float Практические { get; set; }
        public float Зачеты { get; set; }
        public float Консультации { get; set; }
        public float Экзамены { get; set; }
        public float ПрактикиНир { get; set; }
        public float КурсовоеПроектирование { get; set; }
        public float Вкр { get; set; }
        public float Гэк { get; set; }
        public float ГакДопЗащРец { get; set; }
        public float Руководство { get; set; }

        public float Сумма => Лекции + Лабораторные + Практические + Зачеты + Консультации + Экзамены +
                              ПрактикиНир + КурсовоеПроектирование + Вкр + Гэк + ГакДопЗащРец + Руководство;

        public string ToStringDebug()
        {
            return
                $"{Лекции,3} {Лабораторные,3} {Практические,3} {Зачеты,3} {Консультации,3} {Экзамены,3} {ПрактикиНир,3} {КурсовоеПроектирование,3} {Вкр,3} {Гэк,3} {ГакДопЗащРец,3} {Руководство,3}";
        }

        public bool Equals(Нагрузка нагрузка)
        {
            return Math.Abs(Лекции - нагрузка.Лекции) < 0.1 &&
                   Math.Abs(Лабораторные - нагрузка.Лабораторные) < 0.1 &&
                   Math.Abs(Практические - нагрузка.Практические) < 0.1 &&
                   Math.Abs(Зачеты - нагрузка.Зачеты) < 0.1 &&
                   Math.Abs(Консультации - нагрузка.Консультации) < 0.1 &&
                   Math.Abs(Экзамены - нагрузка.Экзамены) < 0.1 &&
                   Math.Abs(ПрактикиНир - нагрузка.ПрактикиНир) < 0.1 &&
                   Math.Abs(КурсовоеПроектирование - нагрузка.КурсовоеПроектирование) < 0.1 &&
                   Math.Abs(Вкр - нагрузка.Вкр) < 0.1 &&
                   Math.Abs(Гэк - нагрузка.Гэк) < 0.1 &&
                   Math.Abs(ГакДопЗащРец - нагрузка.ГакДопЗащРец) < 0.1 &&
                   Math.Abs(Руководство - нагрузка.Руководство) < 0.1;
        }
    }
}